{"version":3,"file":"static/js/362.0966e1ad.chunk.js","mappings":"4MAGaA,EAAY,kCAGZC,EAAO,CAClBC,IADkB,SACdC,EAAaC,GAEf,OAAOC,EAAAA,EAAAA,GAAM,CACXC,OAAQ,MACRH,IAAI,GAAD,OAPe,gCAOf,OAAgBA,EAAhB,oBATc,oCASd,OAAyCC,GAAQ,KAEvD,E,+LCXUG,EAAS,mCAAG,+GAEQN,EAAAA,GAAAA,IAAS,uBAFjB,uBAERO,EAFQ,EAEdC,KAFc,kBAGdD,GAHc,sCAKf,IAAIE,MAAJ,MALe,yDAAH,qDASTC,EAAQ,mCAAG,WAAOC,GAAP,kGAESX,EAAAA,GAAAA,IAAA,iBAAmBW,IAF5B,uBAEPC,EAFO,EAEbJ,KAFa,kBAGbI,GAHa,sCAKd,IAAIH,MAAJ,MALc,yDAAH,sDASRI,EAAY,mCAAG,WAAOC,GAAP,kGAEmBd,EAAAA,GAAAA,IAAA,qEAAwEc,IAF3F,uBAEAP,EAFA,EAEjBC,KAAQO,QAFS,kBAGjBR,GAHiB,sCAKlB,IAAIE,MAAJ,MALkB,yDAAH,sDASZO,EAAe,mCAAG,WAAOC,GAAP,kGAEGjB,EAAAA,GAAAA,IAAA,UAAYiB,IAFf,uBAEdC,EAFc,EAEpBV,KAFoB,kBAGpBU,GAHoB,sCAKrB,IAAIT,MAAJ,MALqB,yDAAH,sDASfU,EAAc,mCAAG,WAAOC,GAAP,kGAEIpB,EAAAA,GAAAA,IAAA,UAAYoB,IAFhB,uBAEbC,EAFa,EAEnBb,KAFmB,kBAGnBa,GAHmB,sCAKpB,IAAIZ,MAAJ,MALoB,yDAAH,qD,uJCS3B,EAxCiB,WACf,OAA4Ba,EAAAA,EAAAA,UAAS,IAArC,eAAOC,EAAP,KAAeC,EAAf,KACMC,GAAWC,EAAAA,EAAAA,MAajB,OAXAC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAS,mCAAG,uGACUtB,EAAAA,EAAAA,MADV,gBACRS,EADQ,EACRA,QAERS,EAAUT,GAHM,2CAAH,qDAMfa,IAAYC,SAEb,GAAC,KAGA,gBAAKC,UAAU,OAAf,UACE,wBAEIP,EAAOQ,KAAI,SAACnB,GAAD,OACT,yBACE,SAAC,KAAD,CACEoB,GAAE,gBAAWpB,EAAMqB,IACnBC,MAAO,CACLC,KAAM,CACJV,SAAAA,EACAW,MAAO,YALb,UASE,0BAAOxB,EAAMyB,WAVRzB,EAAMqB,GADN,OAmBpB,C","sources":["api/common.ts","api/movie-api.ts","pages/Home/index.tsx"],"sourcesContent":["import axios from \"axios\";\n\nexport const API_KEY = '17c5a5de30466e42172be6812ea6018f';\nexport const IMAGE_URL = 'https://image.tmdb.org/t/p/w500';\nexport const BASE_URL = 'https://api.themoviedb.org/3';\n\nexport const HTTP = {\n  get(url: string, q?: string) {\n\n    return axios({\n      method: 'get',\n      url: `${BASE_URL}${url}?api_key=${API_KEY}${q ? q : ''}`,\n    });\n  }\n}\n","import { HTTP } from \"./common\";\n\nexport const getTrends = async (): Promise<any> => {\n  try {\n    const {data: movies} = await HTTP.get('/trending/movie/day');\n    return movies;\n  } catch (e) {\n    throw new Error(e);\n  }\n}\n\nexport const getMovie = async (movie_id: string): Promise<any> => {\n  try {\n    const {data: movie} =  await HTTP.get(`/movie/${movie_id}`);\n    return movie;\n  } catch (e) {\n    throw new Error(e);\n  }\n}\n\nexport const searchMovies = async (query: string): Promise<Array<object>> => {\n  try {\n    const {data: { results: movies }} =  await HTTP.get(`/search/movie`, `&language=en-US&page=1&include_adult=false&${query}`);\n    return movies;\n  }catch (e) {\n    throw new Error(e);\n  }\n}\n\nexport const getMovieCredits = async (movie_credit_path: string): Promise<any> => {\n  try {\n    const {data: credit} =  await HTTP.get(`${movie_credit_path}`);\n    return credit;\n  }catch (e) {\n    throw new Error(e);\n  }\n}\n\nexport const getMovieReview = async (movie_review_path: string): Promise<any> => {\n  try {\n    const {data: review} =  await HTTP.get(`${movie_review_path}`);\n    return review;\n  }catch (e) {\n    throw new Error(e);\n  }\n}\n","import { useEffect, useState } from \"react\";\nimport { Link, useLocation } from 'react-router-dom';\n\nimport { getTrends } from \"../../api/movie-api\";\n\nimport './style.scss';\n\nconst HomePage = () => {\n  const [trends, setTrends] = useState([]);\n  const location = useLocation();\n\n  useEffect(() => {\n    const getMovies = async () => {\n      const { results } = await getTrends();\n\n      setTrends(results);\n    };\n\n    getMovies().finally();\n    // eslint-disable-next-line\n  },[])\n\n  return (\n    <div className=\"home\">\n      <ul>\n        {\n          trends.map((movie) => (\n            <li key={movie.id}>\n              <Link\n                to={`movie/${movie.id}`}\n                state={{\n                  from: {\n                    location,\n                    label: 'Go Back'\n                  }\n                }}\n              >\n                <span>{movie.title}</span>\n              </Link>\n            </li>\n          ))\n        }\n      </ul>\n    </div>\n  )\n}\n\nexport default HomePage;\n"],"names":["IMAGE_URL","HTTP","get","url","q","axios","method","getTrends","movies","data","Error","getMovie","movie_id","movie","searchMovies","query","results","getMovieCredits","movie_credit_path","credit","getMovieReview","movie_review_path","review","useState","trends","setTrends","location","useLocation","useEffect","getMovies","finally","className","map","to","id","state","from","label","title"],"sourceRoot":""}