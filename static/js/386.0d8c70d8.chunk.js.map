{"version":3,"file":"static/js/386.0d8c70d8.chunk.js","mappings":"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","sources":["api/common.ts","api/movie-api.ts","pages/MovieDetailsPage/index.tsx","utils/common.ts"],"sourcesContent":["import axios from \"axios\";\n\nexport const API_KEY = '17c5a5de30466e42172be6812ea6018f';\nexport const IMAGE_URL = 'https://image.tmdb.org/t/p/w500';\nexport const BASE_URL = 'https://api.themoviedb.org/3';\n\nexport const HTTP = {\n  get(url: string, q?: string) {\n\n    return axios({\n      method: 'get',\n      url: `${BASE_URL}${url}?api_key=${API_KEY}${q ? q : ''}`,\n    });\n  }\n}\n","import { HTTP } from \"./common\";\n\nexport const getTrends = async (): Promise<any> => {\n  try {\n    const {data: movies} = await HTTP.get('/trending/movie/day');\n    return movies;\n  } catch (e) {\n    throw new Error(e);\n  }\n}\n\nexport const getMovie = async (movie_id: string): Promise<any> => {\n  try {\n    const {data: movie} =  await HTTP.get(`/movie/${movie_id}`);\n    return movie;\n  } catch (e) {\n    throw new Error(e);\n  }\n}\n\nexport const searchMovies = async (query: string): Promise<Array<object>> => {\n  try {\n    const {data: { results: movies }} =  await HTTP.get(`/search/movie`, `&language=en-US&page=1&include_adult=false&${query}`);\n    return movies;\n  }catch (e) {\n    throw new Error(e);\n  }\n}\n\nexport const getMovieCredits = async (movie_credit_path: string): Promise<any> => {\n  try {\n    const {data: credit} =  await HTTP.get(`${movie_credit_path}`);\n    return credit;\n  }catch (e) {\n    throw new Error(e);\n  }\n}\n\nexport const getMovieReview = async (movie_review_path: string): Promise<any> => {\n  try {\n    const {data: review} =  await HTTP.get(`${movie_review_path}`);\n    return review;\n  }catch (e) {\n    throw new Error(e);\n  }\n}\n","import React, { useEffect, useState } from \"react\";\n\nimport {\n  useLocation,\n  NavLink,\n  useResolvedPath,\n  Outlet, useNavigate\n} from 'react-router-dom';\n\nimport { getMovie } from '../../api/movie-api';\nimport { getIdFromUrl } from '../../utils/common';\nimport { IMAGE_URL } from '../../api/common';\n\nimport './style.scss';\n\nconst MovieDetailPage = () => {\n  const [movie, setMovie] = useState<any>({});\n  const { pathname } = useResolvedPath('');\n  const location = useLocation();\n  const navigate = useNavigate();\n\n  useEffect(() => {\n    const movieId = getIdFromUrl(pathname);\n\n    const getCurrentMovieDetail = async () => {\n      const movie = await getMovie(movieId);\n      setMovie(movie);\n    }\n\n    getCurrentMovieDetail().finally();\n\n  },[pathname]);\n\n  const onGoBack = () => {\n    navigate(location?.state?.from?.location ?? \"/\")\n  };\n\n  return (\n    <div className=\"movieDetails\">\n      <button type=\"button\" onClick={onGoBack}>Go Back</button>\n      <div className=\"movieDetails__poster poster\">\n        <img src={`${movie?.poster_path && IMAGE_URL}/${movie?.poster_path}`} className=\"poster-img\" alt=\"poster\"/>\n        <div className=\"poster-info\">\n          <h3 className=\"poster-title\">{movie.title} ({movie.release_date?.slice(0, movie.release_date?.indexOf('-'))})</h3>\n          <p>Use score: {Math.round(movie.popularity)}%</p>\n          <div>\n            <h4 className=\"subtitle\">Overview</h4>\n            <p>{movie.overview}</p>\n\n            <h5>Generes</h5>\n            <div className=\"generes\">\n              {\n                movie.genres?.map((genre: {id: number, name: string}) => (\n                  <p className=\"genre\" key={genre.id}>{genre.name}</p>\n                ))\n              }\n            </div>\n          </div>\n        </div>\n      </div>\n      <hr />\n      <div className=\"movieDetails__additional-info additional-info\">\n        <NavLink\n          to={`${pathname}/cast`}\n          state={location.state}\n        >\n          <button className=\"additional-info-btn\">Cast</button>\n        </NavLink>\n        <NavLink\n          to={`${pathname}/reviews`}\n          state={location.state}\n        >\n          <button className=\"additional-info-btn\">Review</button>\n        </NavLink>\n      </div>\n\n      <div className=\"main-info\">\n        <Outlet context={[movie]} />\n      </div>\n    </div>\n  )\n}\n\nexport default MovieDetailPage;\n","export const getIdFromUrl = (url: string): string | null => {\n  const splitUrl = url.split('/');\n  let id:string | null = null;\n\n  splitUrl.forEach(el => {\n    if(parseInt(el)) {\n      id = el;\n    }\n  })\n\n  return id;\n}\n"],"names":["IMAGE_URL","HTTP","get","url","q","axios","method","getTrends","movies","data","Error","getMovie","movie_id","movie","searchMovies","query","results","getMovieCredits","movie_credit_path","credit","getMovieReview","movie_review_path","review","useState","setMovie","pathname","useResolvedPath","location","useLocation","navigate","useNavigate","useEffect","movieId","splitUrl","split","id","forEach","el","parseInt","getIdFromUrl","getCurrentMovieDetail","finally","className","type","onClick","state","from","src","poster_path","alt","title","release_date","slice","indexOf","Math","round","popularity","overview","genres","map","genre","name","to","context"],"sourceRoot":""}